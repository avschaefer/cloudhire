interface EmailData {
  to: string
  subject: string
  htmlContent: string
  attachments?: Array<{
    filename: string
    content: string
    type: string
  }>
}

export async function sendReportEmail(reportHTML: string, candidateName: string, position: string): Promise<boolean> {
  try {
    // For Resend without verified domain, we can only send to the account email
    const resendAccountEmail = process.env.NEXT_PUBLIC_HIRING_MANAGER_EMAIL || "your-resend-account@email.com"

    // Create filename for the HTML report
    const filename = `assessment-report-${candidateName.replace(/\s+/g, "-").toLowerCase()}-${Date.now()}.html`

    const emailData: EmailData = {
      to: resendAccountEmail,
      subject: `Technical Assessment Report - ${candidateName} (${position})`,
      htmlContent: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2 style="color: #1f2937; margin-bottom: 20px;">Technical Assessment Report</h2>
          
          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #374151; margin-top: 0;">Candidate: ${candidateName}</h3>
            <p style="color: #6b7280; margin: 5px 0;"><strong>Position:</strong> ${position}</p>
            <p style="color: #6b7280; margin: 5px 0;"><strong>Report Generated:</strong> ${new Date().toLocaleDateString()}</p>
          </div>
          
          <p style="color: #374151; line-height: 1.6;">
            A comprehensive technical assessment report has been generated for this candidate. 
            The attached HTML file contains detailed analysis including:
          </p>
          
          <ul style="color: #374151; line-height: 1.6;">
            <li>Overall performance metrics with visual charts</li>
            <li>Detailed answer review for all questions</li>
            <li>Hiring recommendation based on assessment results</li>
            <li>Complete candidate information and background</li>
          </ul>
          
          <div style="background-color: #dbeafe; border-left: 4px solid #3b82f6; padding: 15px; margin: 20px 0;">
            <p style="color: #1e40af; margin: 0; font-weight: 500;">
              ðŸ“Ž Please download and open the attached HTML file to view the complete formatted report.
            </p>
          </div>
          
          <p style="color: #6b7280; font-size: 14px; margin-top: 30px;">
            This report was automatically generated by the Technical Assessment System.
          </p>
        </div>
      `,
      attachments: [
        {
          filename: filename,
          content: reportHTML,
          type: "text/html",
        },
      ],
    }

    console.log("Attempting to send email with HTML attachment to:", emailData.to)

    // Send email using Resend API
    const response = await fetch("/api/send-email", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(emailData),
    })

    const result = await response.json()

    if (!response.ok) {
      console.error("Email API Error:", result)
      throw new Error(`Email API responded with status: ${response.status} - ${result.error || "Unknown error"}`)
    }

    // For development, also save the report locally
    localStorage.setItem("latestHTMLReport", reportHTML)
    localStorage.setItem("reportEmailData", JSON.stringify(emailData))

    console.log("Report successfully emailed with HTML attachment to:", emailData.to)
    return result.success
  } catch (error) {
    console.error("Failed to send report email:", error)

    // Fallback: save locally for development
    localStorage.setItem("latestHTMLReport", reportHTML)
    localStorage.setItem(
      "reportEmailData",
      JSON.stringify({
        to: process.env.NEXT_PUBLIC_HIRING_MANAGER_EMAIL || "your-email@example.com",
        subject: `Technical Assessment Report - ${candidateName} (${position})`,
        htmlContent: reportHTML,
      }),
    )

    return false
  }
}

export function downloadHTMLReport(htmlContent: string, filename: string) {
  const blob = new Blob([htmlContent], { type: "text/html" })
  const url = URL.createObjectURL(blob)
  const a = document.createElement("a")
  a.href = url
  a.download = filename
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}

// PDF conversion utility (requires additional setup)
export async function convertHTMLToPDF(htmlContent: string): Promise<Blob | null> {
  try {
    // This would require a service like Puppeteer, jsPDF, or a cloud service
    console.log("PDF conversion would happen here")

    // Example implementation with a cloud service:
    const response = await fetch("/api/html-to-pdf", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ html: htmlContent }),
    })

    if (response.ok) {
      return await response.blob()
    }

    return null
  } catch (error) {
    console.error("Failed to convert HTML to PDF:", error)
    return null
  }
}
