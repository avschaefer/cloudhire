// lib/email-utils.ts - Modular email utilities with enhanced error handling
import { Resend } from 'resend';
import { getResendConfig, getSiteConfig } from './config';

export interface EmailData {
  to: string;
  subject: string;
  html: string;
  from?: string;
}

export interface ReportEmailData {
  examResult: any;
  userBio: any;
  reportHtml?: string;
  customSubject?: string;
}

export class EmailError extends Error {
  constructor(message: string, public originalError?: any) {
    super(message);
    this.name = 'EmailError';
  }
}

let resendClient: Resend | null = null;

function getResendClient(): Resend {
  if (!resendClient) {
    const config = getResendConfig();
    resendClient = new Resend(config.apiKey);
  }
  return resendClient;
}

export async function sendEmail(emailData: EmailData): Promise<any> {
  try {
    const resend = getResendClient();
    const config = getResendConfig();
    
    const data = await resend.emails.send({
      from: emailData.from || config.fromEmail,
      to: emailData.to,
      subject: emailData.subject,
      html: emailData.html,
    });
    
    console.log('✅ Email sent successfully:', { to: emailData.to, subject: emailData.subject });
    return data;
  } catch (error) {
    console.error('❌ Email send failed:', error);
    throw new EmailError(`Failed to send email: ${error instanceof Error ? error.message : 'Unknown error'}`, error);
  }
}

export async function sendReportEmail(reportData: ReportEmailData): Promise<any> {
  try {
    const resendConfig = getResendConfig();
    const { examResult, userBio, reportHtml, customSubject } = reportData;
    
    // Generate report HTML if not provided
    const html = reportHtml || generateReportHtml(examResult, userBio);
    
    // Generate subject line
    const subject = customSubject || generateReportSubject(userBio);
    
    // Send to the configured recipient email
    const emailData: EmailData = {
      to: resendConfig.toEmail,
      subject,
      html,
    };
    
    return await sendEmail(emailData);
  } catch (error) {
    throw new EmailError('Failed to send report email', error);
  }
}

export function generateReportHtml(examResult: any, userBio: any): string {
  const siteConfig = getSiteConfig();
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Technical Exam Report - ${userBio.firstName} ${userBio.lastName}</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: #f8f9fa; padding: 20px; border-bottom: 2px solid #007bff; }
        .content { padding: 20px; }
        .section { margin-bottom: 30px; }
        .score { font-size: 24px; font-weight: bold; color: #007bff; }
        .feedback { background: #f8f9fa; padding: 15px; border-left: 4px solid #007bff; }
        .footer { background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Technical Exam Report</h1>
        <p><strong>Candidate:</strong> ${userBio.firstName} ${userBio.lastName}</p>
        <p><strong>Position:</strong> ${userBio.position}</p>
        <p><strong>Experience Level:</strong> ${userBio.experience}</p>
        <p><strong>Education:</strong> ${userBio.education}</p>
      </div>
      
      <div class="content">
        <div class="section">
          <h2>Exam Summary</h2>
          <p><strong>Total Score:</strong> <span class="score">${examResult.totalScore}/${examResult.maxScore}</span></p>
          <p><strong>Percentage:</strong> ${((examResult.totalScore / examResult.maxScore) * 100).toFixed(1)}%</p>
          <p><strong>Time Spent:</strong> ${examResult.timeSpent} minutes</p>
          <p><strong>Completed:</strong> ${new Date(examResult.completedAt).toLocaleString()}</p>
        </div>
        
        <div class="section">
          <h2>Overall Feedback</h2>
          <div class="feedback">
            ${examResult.overallFeedback}
          </div>
        </div>
        
        ${generateDetailedResultsHtml(examResult)}
      </div>
      
      <div class="footer">
        <p>This report was generated by CloudHire - AI-Powered Technical Assessment Platform</p>
        <p>View full report: <a href="${siteConfig.url}/report/${examResult.id}">${siteConfig.url}/report/${examResult.id}</a></p>
      </div>
    </body>
    </html>
  `;
}

function generateDetailedResultsHtml(examResult: any): string {
  if (!examResult.gradingResults || !Array.isArray(examResult.gradingResults)) {
    return '';
  }
  
  let html = '<div class="section"><h2>Detailed Results</h2>';
  
  examResult.gradingResults.forEach((result: any, index: number) => {
    html += `
      <div style="margin-bottom: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px;">
        <h3>Question ${index + 1}</h3>
        <p><strong>Score:</strong> ${result.score}/${result.maxScore}</p>
        <p><strong>Feedback:</strong> ${result.feedback}</p>
        ${result.strengths && result.strengths.length > 0 ? 
          `<p><strong>Strengths:</strong> ${result.strengths.join(', ')}</p>` : ''}
        ${result.improvements && result.improvements.length > 0 ? 
          `<p><strong>Areas for Improvement:</strong> ${result.improvements.join(', ')}</p>` : ''}
      </div>
    `;
  });
  
  html += '</div>';
  return html;
}

function generateReportSubject(userBio: any): string {
  return `Technical Exam Report - ${userBio.firstName} ${userBio.lastName} (${userBio.position})`;
}

// Utility function to validate email configuration
export function validateEmailConfig(): boolean {
  try {
    getResendConfig();
    return true;
  } catch (error) {
    console.error('Email configuration validation failed:', error);
    return false;
  }
}

// Test email function for debugging
export async function sendTestEmail(to?: string): Promise<any> {
  const config = getResendConfig();
  const testEmail: EmailData = {
    to: to || config.toEmail,
    subject: 'CloudHire Test Email',
    html: `
      <h1>Test Email</h1>
      <p>This is a test email from CloudHire to verify email configuration.</p>
      <p>Sent at: ${new Date().toISOString()}</p>
    `,
  };
  
  return await sendEmail(testEmail);
}
